"""****************************** Classification:   Unclassified *****************************************"""
"""
*************************************************************************************************************
*   Module Name: MakeTOM                                                                                    *
*   Author(s): Mark Lambrecht, Brent McCoy                                                                  *
*   Version: 1.0                                                                                            *
*   Date: 01/03/18                                                                                          *
*                                                                                                           *
*       Module        Create a Target Object Map (TOM) generated by a representative                        *
*       Description:  radar.                                                                                *
*                                                                                                           *
*       Algorithm:    N/A                                                                                   *
*                                                                                                           *
*       Inputs:       threatStates - Nx7 array of threat states [x y z dx dy dz t],                         *
*                                    ECI                                                                    *
*                     rvID         - (Scalar) index of RV in threatStates                                   *
*                     tTOM         - (Scalar) time of validity for TOM, s                                   *
*                     pLethal      - Nx1 P(RV) of each track                                                *
*                     fracObjsSeen - (Scalar) fraction of objects "seen" by radar                           *
*                                                                                                           *
*       Outputs:      tom    - Mx9 array of threat states and lethality                                     *
*                              [x y z dx dy dz t P(RV) ID]                                                  *
*                     tomIds - Mx1 array of truth IDs in the TOM                                            *
*                                                                                                           *
*       Calls:        generalUtilities.propagate.PropagateECI                                               *
*                                                                                                           *
*       Requires:     SAPs_Null.json                                                                        *
*                                                                                                           *
*       OA:           M. A. Lambrecht                                                                       *
*                                                                                                           *
*       History:      MAL 14 Dec 2017:  Initial version                                                     *
*                                                                                                           *
*************************************************************************************************************
"""
import os
import numpy as np
import importModules as mods

def MakeTOM(threatStates, rvID, tTOM, pLethal, fracObjsSeen, unpack=False):
    # pick which threats are seen by the radar
    nThreats = int( threatStates.shape[0] )
    nThreatsSeen = int( np.round( fracObjsSeen * nThreats ) )
    randIds = np.random.permutation( np.arange(nThreats) )
    thrtIds = randIds[0:nThreatsSeen]

    # make sure the RV is in the TOM
    if not thrtIds.__contains__(rvID):
        indx = np.random.randint(thrtIds.shape[0])
        thrtIds[indx] = int(rvID)

    # propagate threat states to tTOM (truth data)
    truthThreatStates = np.zeros(threatStates.shape)
    for iThrt in range(nThreats):
        dT = tTOM - threatStates[iThrt, 6]
        truthThreatStates[iThrt] = mods.PropagateECI(threatStates[iThrt], 0.0, dT)

    # now build the TOM
    tom = np.zeros((nThreatsSeen, 9))
    tomCov = np.zeros((nThreatsSeen, 6, 6))
    biasR = np.random.randn(3) * ( mods.SAPs.RDR_POS_BIAS / np.sqrt(3.0) )
    biasV = np.random.randn(3) * ( mods.SAPs.RDR_VEL_BIAS / np.sqrt(3.0) )
    indx = 0
    for iThrt in thrtIds:
        sigR = np.random.rand(3) * ( mods.SAPs.RDR_POS_BIAS / np.sqrt(3.0) )
        sigV = np.random.rand(3) * ( mods.SAPs.RDR_VEL_BIAS / np.sqrt(3.0) )
        tom[indx, 0:3] = sigR + biasR + truthThreatStates[iThrt, 0:3]
        tom[indx, 3:6] = sigV + biasV + truthThreatStates[iThrt, 3:6]
        tom[indx, 6] = tTOM
        tom[indx, 7] = pLethal[ iThrt ]
        tom[indx, 8] = int( iThrt )

        covariance = np.append((sigR + biasR)**2, (sigV + biasV)**2)
        tomCov[indx] = np.diag(covariance)
        indx += 1

    finalTOM = mods.TOMObject(tom, tomCov, thrtIds)
    # pass out tom information
    if unpack:
        return tom, tomCov, thrtIds
    else:
        return finalTOM

"""
*************************************************************************************************************
********************************* Classification:   Unclassified ********************************************
"""
